-- NYU:Poly CS6133 Computer Architecture
-- Instructor: Vikram Padman
--
-- Instruction Memory Initialization File
--
-- Instrucion Format:
--
-- R-Type: <6-bit Opcode>,<5-bit rs>,<5-bit rt>,<5-bit rd>,<5-bit shamt>,<6-bit funct>
--    bits   (31-26)       (25-21)     (20-16)    (15-11)     (10-6)       (5-0)
--
-- I-Type: <6-bit Opcode>,<5-bit rs>,<5-bit rt>,<16-bit Address> 
--   bits     (31-26)      (25-21)   (20-16)     (15-0)
--
--
-- This example demos for addi and nop instruction
--
-- addi instruction format:
-- I-Type: <6-bit Opcode>, <5-bit rs>, <5-bit rd>,<16-bit idata>
--   bits     (31-26)      (25-21)   (20-16)     (15-0)
-- Opcode = 100000, rd = rs + idata
--
-- nop instruction format:
-- R-Type: <6-bit Opcode>,<5-bit XX>,<5-bit XX>,<5-bit XX>,<5-bit shamt>,<6-bit funct>
--    bits   (31-26)       (25-21)     (20-16)    (15-11)     (10-6)       (5-0)
-- Opcode = 000000, funct = 000000


--File format:
-- Hex Address 3 hex nibbles (12 bits) : bit31 ...... bit0;

WIDTH=32;
DEPTH=1024;

ADDRESS_RADIX=HEX;
DATA_RADIX=BIN;

CONTENT BEGIN
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    000       :    10000000000000000000000000000000;
--                 |____||___||___||______________|
--                   |     |    |          |
--                 addi, rs=0, rd=0,    idata=0 
-- This is the first instruction that get's executed
-- in mips_ss CPU in DE0-Nano.
-- This is an addi instruction and it writes 0 to r0
--
    001       :    10000000000000010000000000001010;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  addi, rs=0, rd=1,   idata=A or 10 
-- This is an addi instruction and it writes 10 to r1
--
    002       :    10000000000000100000000000010100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  addi, rs=0, rd=2,   idata=14 or 20 
-- This is an addi instruction and it writes 20 to r2
--
    003       :    00000000001000100001100000100000;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |         
--                 R-type,rs=1,rt=2,rd=3,---,f=add 
-- Add instructions (r-type, opcode=0, funct=100000) 
-- add       => rd = rs + rt
-- Therefore => r3 = r1 + r2
--
    004       :    10101100000000110000000000001100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                   sw, rs=0, rt=3,   offset=12 (0xC)
-- This is a sw instruction. It stores r3 into data memory
-- location 12 (0xC).
--
    005       :    00000000001000100010000000100010;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |         
--                 R-type,rs=1,rt=2,rd=4,---,f=sub 
-- sub instructions (r-type, opcode=0, funct=100010) 
-- add       => rd = rs - rt
-- Therefore => r4 = r1 - r2
--
    006       :    10101100000001000000000000010000;
--                 |____||___||___||______________|
--                   |     |    |          |
--                   sw, rs=0, rt=4,   offset=16 (0x10)
-- This is a sw instruction. It stores r4 into data memory
-- location 16 (0x10).
--
    007       :    00000000010000010010100000100010;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |         
--                 R-type,rs=2,rt=1,rd=5,---,f=sub 
-- sub instructions (r-type, opcode=0, funct=100010) 
-- add       => rd = rs - rt
-- Therefore => r4 = r1 - r5
--
    008       :    00000000000000000000000000000000;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |         
--                 R-type,XXXX,XXXX,XXXX,XXX,f=NOP
-- This is a NOP instruction
--
    009       :    00000000000000000000000000000000;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |         
--                 R-type,XXXX,XXXX,XXXX,XXX,f=NOP
-- This is a NOP instruction
--
    00A       :    10101100000001010000000000010100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  sw, rs=0, rt=5,   offset=20 (0x14)
-- This is a sw instruction. It stores r5 into data memory
-- location 20 (0x14).
--
    00B       :    00010000001000100000000000010100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  beq, rs=1, rt=2,   offset=20 (0x14)
-- This is a beq, branch if equal instruction
-- branch to PC+20 if rs==rt => r1==r2
--
    00C       :    10001100000001100000000000010100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  lw, rs=0, rt=6,   Offset=20 
-- This is a load instruction. It is loading data
-- memory contents location 20 into r6
--
    00D       :    10001100000001110000000000001100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  lw, rs=0, rt=7,   Offset=C 
-- This is a load instruction. It is loading data
-- memory contents location C into r7
--
    00E       :    00010000001001010000000000010100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  beq, rs=1, rt=5,   offset=20 (0x14)
-- This is a beq, branch if equal instruction
-- branch to PC+20 if rs==rt => r1==r5
END;
