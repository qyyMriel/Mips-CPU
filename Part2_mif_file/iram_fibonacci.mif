-- NYU:Poly CS6133 Computer Architecture
-- Instructor: Vikram Padman
--
--
-- Modified by Yi Qin
--
-- Instrucion Format:
--
-- R-Type: <6-bit Opcode>,<5-bit rs>,<5-bit rt>,<5-bit rd>,<5-bit shamt>,<6-bit funct>
--    bits   (31-26)       (25-21)     (20-16)    (15-11)     (10-6)       (5-0)
--
-- I-Type: <6-bit Opcode>,<5-bit rs>,<5-bit rt>,<16-bit Address> 
--   bits     (31-26)      (25-21)   (20-16)     (15-0)
--
--
--File format:
-- Hex Address 3 hex nibbles (12 bits) : bit31 ...... bit0;

WIDTH=32;
DEPTH=1024;

ADDRESS_RADIX=HEX;
DATA_RADIX=BIN;

CONTENT BEGIN

--------------------------------------------------------------------------
--	Overall program structure:
--	r0 is to store increment/decrement parameter Fib1
--	r1 is to store increment/decrement parameter Fib2
--	r2 is to store increment/decrement result
--	r3 is to store count increment times
--	r4 is 0
--	r5 is 1
--	r6 is 39/27h
--
--
--	Addr		Mnemonics
--	000		ld r0,0		-- Load data memory 0 -> r0
--	001		ld r1,4		-- Load data memory 4 -> r1
--	002		ld r2,0		-- Load data memory 8 -> r2
--	003		ld r3,4		-- Load data memory 0 -> r3
--	004		ld r4,0		-- Load data memory 4 -> r4
--  005     ld r5,4     -- Load data memory 12 -> r5
--	006		ld r6,8		-- Load data memory 0 -> r6
--
--	007     add R2, R0 ,R1  -- add the fibonacci number to sum
--	008     out R2          -- show result in LED
--  009     add R0, R1, R4  -- R0 <- R1
--  00A     add R1, R2, R4  -- R1 <- R2
--  00B     add R3, R3, R5  --count_incre + 1
--  00C     beq R3, R6, 1   --we have 39 fibonacci number?
--  00D     beq R4, R4, -7  --if not, continue counting
--  00E     add R2, R0 ,R1  --to get the 40th fibonacci number
--  00F     sub R2, R2, R5  --subtract the number by 1
--  010     out R2          --show result in LED
--  011     beq R2, R1, 1   --if sub_num == para2?
--  012     beq R4, R4, -4  --if not, continue subtracting
--  013     add R1, R0, R4  --R1 <- R0
--  014     sub R0, R2, R0  --R0 <- R2 - R0
--  015     out, R4         --blink LEDS
--  016     beq R2, R4, -23 --num==0? restart
--  017     beq R4,R4, -9   -- continue subtracting
--  018     NOP             --No operation




------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    000       :    10001100000000000000000000000000;
--                 |____||___||___||______________|
--                   |     |    |          |
--                 op=ld, rs=0, rt=0,    addr=0 
--	000		ld r0,0		-- Load data memory 0 -> r0

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    001       :    10001100000000010000000000000100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                 op=ld, rs=0, rt=1,    addr=4
--	001		ld r1,1		-- Load data memory 1 -> r1

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    002       :    10001100000000100000000000000000;
--                 |____||___||___||______________|
--                   |     |    |          |
--                 op=ld, rs=0, rt=2,    addr=0
--	002		ld r2,0		-- Load data memory 0 -> r2

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    003       :    10001100000000110000000000000100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                 op=ld, rs=0, rt=3,    addr=0
--	003		ld r3,1		-- Load data memory 1 -> r3

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    004       :    10001100000001000000000000000000;
--                 |____||___||___||______________|
--                   |     |    |          |
--                 op=ld, rs=0, rt=4,    addr=4
--	004		ld r4,0		-- Load data memory 0 -> r4

------------------------------------------------------------------------------

--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    005       :    10001100000001010000000000000100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                 op=ld, rs=0, rt=5,    addr=4
--	005		ld r5,1		-- Load data memory 1 -> r5

------------------------------------------------------------------------------

--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    006       :    10001100000001100000000000001000;
--                 |____||___||___||______________|
--                   |     |    |          |
--                 op=ld, rs=0, rt=6,    addr=8
--	006		ld r6,40	-- Load data memory 40 -> r6

------------------------------------------------------------------------------



-- Add process


--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    007       :    00000000000000010001000000100000;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |
--                 R-type,rs=0,rt=1,rd=2,---,f=add
--	007		add r2,r0,r1	-- add and load r2<-r0+r1

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    008       :    10110000010000000000000000000000;
--                 |____||___||___________________|
--                   |     |           |
--                  out, rs=2, XXXXXXXXXXXXXXXXXXX
-- This is a out instruction
--	008		out r2

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    009       :    00000000001001000000000000100000;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |
--                 R-type,rs=1,rt=4,rd=0,---,f=add
--	009		add R0, R1, R4  -- R0 <- R1

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    00A       :    00000000010001000000100000100000;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |
--                 R-type,rs=2,rt=4,rd=1,---,f=add
--	00A		add add R1, R2, R4	-- R1 <- R2

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    00B       :    00000000011001010001100000100000;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |
--                 R-type,rs=3,rt=5,rd=3,---,f=add
--	00B		add R3, R3, R5	-- R1 <- R2

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    00C       :    00010000011001100000000000000001;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  beq, rs=3, rt=6,   offset=1
-- This is a beq, branch if equal instruction
--	00C		beq R3, R6, 1 	-- Branch to 00D


------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    00D       :    00010000100001001111111111111001;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  beq, rs=4, rt=4,   offset=-7
-- This is a beq, branch if equal instruction
--	00D		beq r0,r0,007	-- Branch to 007

------------------------------------------------------------------------------

--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    00E       :    00000000000000010001000000100000;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |
--                 R-type,rs=0,rt=1,rd=2,---,f=add
--	00E		add r2,r0,r1	-- add and load r2<-r0+r1

------------------------------------------------------------------------------

-- subtract process

--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    00F       :    00000000010001010001000000100010;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |
--                 R-type,rs=2,rt=5,rd=2,---,f=sub
--	00F		sub r2,r2,r5	-- subtract the number by 1

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    010       :    10110000010000000000000000000000;
--                 |____||___||___________________|
--                   |     |           |
--                  out, rs=2, XXXXXXXXXXXXXXXXXXX
-- This is a out instruction
--	010		out r2    -- show result in LED

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    011       :    00010000010000010000000000000001;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  beq, rs=2, rt=1,   offset=1
-- This is a beq, branch if equal instruction
--	011		beq R2, R1, 1 	-- Branch to 012

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    012       :    00010000100001001111111111111100;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  beq, rs=4, rt=4,   offset=-4
-- This is a beq, branch if equal instruction
--	012		beq r4,r4,00E	-- Branch to 00E

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    013       :    00000000000001000000100000100000;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |
--                 R-type,rs=0,rt=4,rd=1,---,f=add
--	013		add r1,r0,r4	-- R1 <- R0

------------------------------------------------------------------------------

--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    014       :    00000000010000000000000000100010;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |
--                 R-type,rs=2,rt=0,rd=0,---,f=sub
--	014		sub r2,r2,r5	-- R0 <- R2 - R0

------------------------------------------------------------------------------

--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    015       :    10110000100000000000000000000000;
--                 |____||___||___________________|
--                   |     |           |
--                  out, rs=4, XXXXXXXXXXXXXXXXXXX
-- This is a out instruction
--	015		out r4         -- blink LEDS

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    016       :    00010000000001001111111111101001;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  beq, rs=0, rt=4,   offset=-23
-- This is a beq, branch if equal instruction
--	016		beq r2,r4,000	-- Branch to begining

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    017       :    00010000100001001111111111110111;
--                 |____||___||___||______________|
--                   |     |    |          |
--                  beq, rs=4, rt=4,   offset=-9
-- This is a beq, branch if equal instruction
--	017		beq r4,r4,00E	-- Branch to 00E

------------------------------------------------------------------------------
--Hex Address :   bit31...........bit15..........bit0;
--   |             |               |              |
    018       :    00000000000000000000000000000000;
--                 |____||___||___||___||___||____|
--                   |     |    |    |    |    |
--                 R-type,XXXX,XXXX,XXXX,XXX,f=NOP
--	018		This is a NOP instruction


END;
